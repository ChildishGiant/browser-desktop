diff --git a/browser/components/extensions/ExtensionPopups.jsm b/browser/components/extensions/ExtensionPopups.jsm
index 3460370477a56384a6a864212f18f3d22fba32ea..bde119a08f4c98402b9cc1998e4fb5155660b1c0 100644
--- a/browser/components/extensions/ExtensionPopups.jsm
+++ b/browser/components/extensions/ExtensionPopups.jsm
@@ -53,7 +53,7 @@ function promisePopupShown(popup) {
     } else {
       popup.addEventListener(
         "popupshown",
-        function(event) {
+        function (event) {
           resolve();
         },
         { once: true }
@@ -133,7 +133,7 @@ class BasePopup {
     this.destroyed = true;
     this.browserLoadedDeferred.reject(new Error("Popup destroyed"));
     // Ignore unhandled rejections if the "attach" method is not called.
-    this.browserLoaded.catch(() => {});
+    this.browserLoaded.catch(() => { });
 
     BasePopup.instances.get(this.window).delete(this.extension);
 
@@ -177,7 +177,7 @@ class BasePopup {
       mm.removeMessageListener("Extension:BrowserContentLoaded", this);
       mm.removeMessageListener("Extension:BrowserResized", this);
     } else if (finalize) {
-      this.receiveMessage = () => {};
+      this.receiveMessage = () => { };
     }
     browser.removeEventListener("pagetitlechanged", this);
     browser.removeEventListener("DOMWindowClose", this);
@@ -449,9 +449,14 @@ class BasePopup {
     // If they have not set a background-color, we force it to white to ensure visibility
     // of the extension content. Passing `null` should be treated the same as no argument,
     // which is why we can't use default parameters here.
+    if (this.extension.id == "qr@dothq.co") {
+      return;
+    }
+
     if (!background) {
       background = "#fff";
     }
+
     if (this.panel.id != "widget-overflow") {
       this.panel.style.setProperty("--arrowpanel-background", background);
     }
@@ -614,7 +619,7 @@ class ViewPopup extends BasePopup {
       Promise.race([
         // This promise may be rejected if the popup calls window.close()
         // before it has fully loaded.
-        this.browserLoaded.catch(() => {}),
+        this.browserLoaded.catch(() => { }),
         new Promise(resolve => setTimeout(resolve, POPUP_LOAD_TIMEOUT_MS)),
       ]),
     ]);
