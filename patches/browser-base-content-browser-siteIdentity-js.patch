diff --git a/browser/base/content/browser-siteIdentity.js b/browser/base/content/browser-siteIdentity.js
index 0572abe547a0b93b0458ef58f692ca7c8ee4b69d..979fe3dd3834305b59d0cd2ac5b9e3387503370f 100644
--- a/browser/base/content/browser-siteIdentity.js
+++ b/browser/base/content/browser-siteIdentity.js
@@ -57,7 +57,7 @@ var gIdentityHandler = {
    * RegExp used to decide if an about url should be shown as being part of
    * the browser UI.
    */
-  _secureInternalPages: /^(?:accounts|addons|cache|certificate|config|crashes|downloads|license|logins|preferences|protections|rights|sessionrestore|support|welcomeback|ion)(?:[?#]|$)/i,
+  _secureInternalPages: /^(?:accounts|addons|cache|certificate|config|crashes|downloads|license|logins|newpreferences|preferences|protections|rights|sessionrestore|support|welcomeback|ion|history)(?:[?#]|$)/i,
 
   /**
    * Whether the established HTTPS connection is considered "broken".
@@ -196,10 +196,9 @@ var gIdentityHandler = {
       if (this._protonEnabled) {
         // When proton is enabled, we need to place the security section
         // within a toolbarbutton.
-        let button = document.createXULElement("toolbarbutton");
+        let button = document.createXULElement("hbox");
         button.id = "identity-popup-security-button";
-        button.classList.add("subviewbutton-nav", "subviewbutton");
-        button.setAttribute("align", "center");
+        button.classList.add("identity-popup-section");
         this.showSecuritySubView = this.showSecuritySubView.bind(this);
         button.addEventListener("command", this.showSecuritySubView);
         button.appendChild(
@@ -213,7 +212,8 @@ var gIdentityHandler = {
           this._identityPopupMainView.querySelector("toolbarseparator")
             .nextSibling
         );
-        this._popupExpander.hidden = true;
+        // Do not hide popup expanders
+        // this._popupExpander.hidden = true;
       }
     }
   },
@@ -299,7 +299,7 @@ var gIdentityHandler = {
   get _identityPopupContentVerif() {
     delete this._identityPopupContentVerif;
     return (this._identityPopupContentVerif = document.getElementById(
-      "identity-popup-content-verifier"
+      "identity-popup-section-subtitle"
     ));
   },
   get _identityPopupCustomRootLearnMore() {
@@ -334,7 +334,7 @@ var gIdentityHandler = {
   get _popupExpander() {
     delete this._popupExpander;
     return (this._popupExpander = document.getElementById(
-      "identity-popup-security-expander"
+      "identity-popup-certificate-expander"
     ));
   },
   get _clearSiteDataFooter() {
@@ -663,7 +663,7 @@ var gIdentityHandler = {
     // SubjectName fields, broken up for individual access
     if (cert.subjectName) {
       result.subjectNameFields = {};
-      cert.subjectName.split(",").forEach(function(v) {
+      cert.subjectName.split(",").forEach(function (v) {
         var field = v.split("=");
         this[field[0]] = field[1];
       }, result.subjectNameFields);
@@ -789,6 +789,15 @@ var gIdentityHandler = {
     return "unknownIdentity";
   },
 
+  /**
+   * Returns the reader mode button element.
+  */
+  get _readerModeButton() {
+    return (this._readerModeButton = document.getElementById(
+      "reader-mode-button"
+    ));
+  },
+
   /**
    * Returns whether the issuer of the current certificate chain is
    * built-in (returns false) or imported (returns true).
@@ -823,6 +832,8 @@ var gIdentityHandler = {
     let icon_label = "";
     let tooltip = "";
 
+    this._identityIconLabel.removeAttribute("hidden");
+
     if (this._isSecureInternalUI) {
       // This is a secure internal Firefox page.
       this._identityBox.className = "chromeUI";
@@ -830,12 +841,20 @@ var gIdentityHandler = {
       icon_label = brandBundle.getString("brandShorterName");
     } else if (this._pageExtensionPolicy) {
       // This is a WebExtension page.
-      this._identityBox.className = "extensionPage";
-      let extensionName = this._pageExtensionPolicy.name;
-      icon_label = gNavigatorBundle.getFormattedString(
-        "identity.extension.label",
-        [extensionName]
-      );
+      let displayUri = this._uri.displaySpec || null;
+
+      if (BROWSER_NEW_TAB_URL == displayUri) {
+        this._identityIconLabel.setAttribute("hidden", "true");
+        this._identityBox.setAttribute("pageproxystate", "invalid");
+        gProtectionsHandler._trackingProtectionIconContainer.setAttribute("hidden", true);
+      } else {
+        this._identityBox.className = "extensionPage";
+        let extensionName = this._pageExtensionPolicy.name;
+        icon_label = gNavigatorBundle.getFormattedString(
+          "identity.extension.label",
+          [extensionName]
+        );
+      }
     } else if (this._uriHasHost && this._isSecureConnection) {
       // This is a secure connection.
       this._identityBox.className = "verifiedDomain";
@@ -876,6 +895,12 @@ var gIdentityHandler = {
     } else if (this._isPotentiallyTrustworthy) {
       // This is a local resource (and shouldn't be marked insecure).
       this._identityBox.className = "localResource";
+
+      let readerActive = this._readerModeButton.getAttribute("readeractive");
+
+      if (readerActive == "true") {
+        this._identityBox.className = "readerIdentity";
+      }
     } else {
       // This is an insecure connection.
       let warnOnInsecure =
@@ -1162,9 +1187,14 @@ var gIdentityHandler = {
       [owner]
     );
 
+    document.l10n.setAttributes(
+      this._identityPopupContentVerif,
+      "identity-certificate-issuer",
+      { certIssuer: verifier.split(": ")[1] || "" }
+    );
+
     this._identityPopupContentOwner.textContent = owner;
     this._identityPopupContentSupp.textContent = supplemental;
-    this._identityPopupContentVerif.textContent = verifier;
   },
 
   setURI(uri) {
