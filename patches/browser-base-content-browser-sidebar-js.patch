diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
index 88f7ed1afbb0f25130ae9b2c6d5058da1fc3a21e..0565b50101c7ea2acbafdb7f2dc38bdd92d3cb91 100644
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -7,42 +7,56 @@
  */
 var SidebarUI = {
   get sidebars() {
-    if (this._sidebars) {
-      return this._sidebars;
+    if (typeof this._sidebars == 'undefined') {
+      this._sidebars = new Map([
+        [
+          "viewBookmarksSidebar",
+          {
+            title: document
+              .getElementById("sidebar-switcher-bookmarks")
+              .getAttribute("label"),
+            url: "chrome://browser/content/sidebars/bookmarks/sidebar.html",
+            menuId: "menu_bookmarksSidebar",
+            buttonId: "sidebar-switcher-bookmarks",
+          },
+        ],
+        [
+          "viewHistorySidebar",
+          {
+            title: document
+              .getElementById("sidebar-switcher-history")
+              .getAttribute("label"),
+            url: "chrome://browser/content/places/historySidebar.xhtml",
+            menuId: "menu_historySidebar",
+            triggerButtonId: "appMenuViewHistorySidebar",
+            buttonId: "sidebar-switcher-history",
+          },
+        ],
+        [
+          "viewTabsSidebar",
+          {
+            title: document
+              .getElementById("sidebar-switcher-tabs")
+              .getAttribute("label"),
+            url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
+            menuId: "menu_tabsSidebar",
+            buttonId: "sidebar-switcher-tabs",
+          },
+        ],
+        [
+          "viewAccountsSidebar",
+          {
+            title: document.getElementById("sidebar-switcher-accounts")
+              .getAttribute("label"),
+            url: "about:profiles",
+            menuId: "menu_accountsSidebar",
+            buttonId: "sidebar-switcher-accounts"
+          },
+        ],
+      ]);
     }
-    return (this._sidebars = new Map([
-      [
-        "viewBookmarksSidebar",
-        {
-          title: document
-            .getElementById("sidebar-switcher-bookmarks")
-            .getAttribute("label"),
-          url: "chrome://browser/content/places/bookmarksSidebar.xhtml",
-          menuId: "menu_bookmarksSidebar",
-        },
-      ],
-      [
-        "viewHistorySidebar",
-        {
-          title: document
-            .getElementById("sidebar-switcher-history")
-            .getAttribute("label"),
-          url: "chrome://browser/content/places/historySidebar.xhtml",
-          menuId: "menu_historySidebar",
-          triggerButtonId: "appMenuViewHistorySidebar",
-        },
-      ],
-      [
-        "viewTabsSidebar",
-        {
-          title: document
-            .getElementById("sidebar-switcher-tabs")
-            .getAttribute("label"),
-          url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
-          menuId: "menu_tabsSidebar",
-        },
-      ],
-    ]));
+
+    return this._sidebars;
   },
 
   // Avoid getting the browser element from init() to avoid triggering the
@@ -61,6 +75,7 @@ var SidebarUI = {
   lastOpenedId: null,
 
   _box: null,
+  _iconBar: null,
   // The constructor of this label accesses the browser element due to the
   // control="sidebar" attribute, so avoid getting this label during startup.
   get _title() {
@@ -76,6 +91,7 @@ var SidebarUI = {
   _switcherTarget: null,
   _switcherArrow: null,
   _inited: false,
+  _sidebars: undefined,
 
   _initDeferred: PromiseUtils.defer(),
 
@@ -89,6 +105,7 @@ var SidebarUI = {
 
   init() {
     this._box = document.getElementById("sidebar-box");
+    this._iconBar = document.getElementById("sidebar-iconbar");
     this._splitter = document.getElementById("sidebar-splitter");
     this._icon = document.getElementById("sidebar-icon");
     this._reversePositionButton = document.getElementById(
@@ -281,10 +298,16 @@ var SidebarUI = {
       return true;
     }
 
+    console.log(sourceUI._box, sourceUI._box.getBoundingClientRect().width)
+
     this._box.setAttribute(
       "width",
       sourceUI._box.getBoundingClientRect().width
     );
+    this._box.setAttribute(
+      "--sidebar-width",
+      sourceUI._box.getBoundingClientRect().width
+    );
     this.showInitially(commandID);
 
     return true;
@@ -451,11 +474,15 @@ var SidebarUI = {
     return this._show(commandID).then(() => {
       this._loadSidebarExtension(commandID);
 
+      this.ensureTooltipSet();
+
       if (triggerNode) {
         updateToggleControlLabel(triggerNode);
       }
 
       this._fireFocusedEvent();
+
+      this._box.style.marginLeft = ``;
       return true;
     });
   },
@@ -494,7 +521,13 @@ var SidebarUI = {
     return new Promise(resolve => {
       this.selectMenuItem(commandID);
 
+      let { url, title } = this.sidebars.get(commandID);
+      this.title = title;
+      this.browser.style.backgroundColor = "var(--sidebar-background-color)";
+      this.browser.setAttribute("src", url); // kick off async load
+
       this._box.hidden = this._splitter.hidden = false;
+      this._iconBar.hidden = this._splitter.hidden = false;
       this.setPosition();
 
       this.hideSwitcherPanel();
@@ -503,10 +536,6 @@ var SidebarUI = {
       this._box.setAttribute("sidebarcommand", commandID);
       this.lastOpenedId = commandID;
 
-      let { url, title } = this.sidebars.get(commandID);
-      this.title = title;
-      this.browser.setAttribute("src", url); // kick off async load
-
       if (this.browser.contentDocument.location.href != url) {
         this.browser.addEventListener(
           "load",
@@ -546,17 +575,26 @@ var SidebarUI = {
 
     this.selectMenuItem("");
 
+    this._box.removeAttribute("checked");
+
+    this._box.style.marginLeft = `${-Math.abs(this._box.getBoundingClientRect().width)}px`
+
+    let animationsDisabled = Services.prefs.getBoolPref("sidebar.animations.disabled");
+
+    setTimeout(() => {
+      this._box.hidden = this._splitter.hidden = true;
+      this._iconBar.hidden = this._splitter.hidden = true;
+    }, animationsDisabled ? 0 : 170);
+
     // Replace the document currently displayed in the sidebar with about:blank
     // so that we can free memory by unloading the page. We need to explicitly
     // create a new content viewer because the old one doesn't get destroyed
     // until about:blank has loaded (which does not happen as long as the
     // element is hidden).
+    this.browser.style.backgroundColor = "var(--sidebar-background-color)";
     this.browser.setAttribute("src", "about:blank");
     this.browser.docShell.createAboutBlankContentViewer(null, null);
 
-    this._box.removeAttribute("checked");
-    this._box.hidden = this._splitter.hidden = true;
-
     let selBrowser = gBrowser.selectedBrowser;
     selBrowser.focus();
     if (triggerNode) {
@@ -569,10 +607,11 @@ var SidebarUI = {
    * none if the argument is an empty string.
    */
   selectMenuItem(commandID) {
-    for (let [id, { menuId, triggerButtonId }] of this.sidebars) {
+    console.log(commandID)
+    this.sidebars.forEach(({ menuId, buttonId }, id) => {
       let menu = document.getElementById(menuId);
       let triggerbutton =
-        triggerButtonId && document.getElementById(triggerButtonId);
+        buttonId && document.getElementById(buttonId);
       if (id == commandID) {
         menu.setAttribute("checked", "true");
         if (triggerbutton) {
@@ -586,8 +625,17 @@ var SidebarUI = {
           updateToggleControlLabel(triggerbutton);
         }
       }
-    }
+    });
   },
+
+  ensureTooltipSet() {
+    this.sidebars.forEach(({ title, buttonId }, id) => {
+      let button = document.getElementById(buttonId);
+
+      button.setAttribute("tooltiptext", title);
+      button.setAttribute("context", "sidebar-item-context-menu");
+    });
+  }
 };
 
 // Add getters related to the position here, since we will want them
