diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
index 16168e5db4bac5442668f94d6639dc92afd1698d..d6a2d8c4b059d03c61eaf5d8558de1c3afef71cd 100644
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -255,6 +255,11 @@ XPCOMUtils.defineLazyScriptGetter(
   "gSharedTabWarning",
   "chrome://browser/content/browser-webrtc.js"
 );
+XPCOMUtils.defineLazyScriptGetter(
+  this,
+  "TabPreview",
+  "chrome://browser/content/tabpreview/tabpreview.js"
+);
 
 // lazy service getters
 
@@ -2057,7 +2062,7 @@ var gBrowserInit = {
       PanicButtonNotifier.init();
     });
 
-    gBrowser.tabContainer.addEventListener("TabSelect", function() {
+    gBrowser.tabContainer.addEventListener("TabSelect", function () {
       for (let panel of document.querySelectorAll(
         "panel[tabspecific='true']"
       )) {
@@ -2257,7 +2262,7 @@ var gBrowserInit = {
             csp: window.arguments[10],
             fromExternal: true,
           });
-        } catch (e) {}
+        } catch (e) { }
       } else if (window.arguments.length >= 3) {
         // window.arguments[1]: unused (bug 871161)
         //                 [2]: referrerInfo (nsIReferrerInfo)
@@ -2419,7 +2424,7 @@ var gBrowserInit = {
   // promise resolving to the URI to load.
   get uriToLoadPromise() {
     delete this.uriToLoadPromise;
-    return (this.uriToLoadPromise = (function() {
+    return (this.uriToLoadPromise = (function () {
       // window.arguments[0]: URI to load (string), or an nsIArray of
       //                      nsISupportsStrings to load, or a xul:tab of
       //                      a tabbrowser, which will be replaced by this
@@ -2504,7 +2509,7 @@ var gBrowserInit = {
     try {
       gBrowser.removeProgressListener(window.XULBrowserWindow);
       gBrowser.removeTabsProgressListener(window.TabsProgressListener);
-    } catch (ex) {}
+    } catch (ex) { }
 
     PlacesToolbarHelper.uninit();
 
@@ -2694,7 +2699,7 @@ function BrowserForward(aEvent) {
   if (where == "current") {
     try {
       gBrowser.goForward();
-    } catch (ex) {}
+    } catch (ex) { }
   } else {
     duplicateTabIn(gBrowser.selectedTab, where, 1);
   }
@@ -2706,7 +2711,7 @@ function BrowserBack(aEvent) {
   if (where == "current") {
     try {
       gBrowser.goBack();
-    } catch (ex) {}
+    } catch (ex) { }
   } else {
     duplicateTabIn(gBrowser.selectedTab, where, -1);
   }
@@ -2875,7 +2880,7 @@ function loadOneOrMoreURIs(aURIString, aTriggeringPrincipal, aCsp) {
       triggeringPrincipal: aTriggeringPrincipal,
       csp: aCsp,
     });
-  } catch (e) {}
+  } catch (e) { }
 }
 
 function openLocation(event) {
@@ -2957,7 +2962,7 @@ var gLastOpenDirectory = {
         if (!this._lastDir.exists()) {
           this._lastDir = null;
         }
-      } catch (e) {}
+      } catch (e) { }
     }
     return this._lastDir;
   },
@@ -2996,7 +3001,7 @@ function BrowserOpenFileWindow() {
           if (fp.file) {
             gLastOpenDirectory.path = fp.file.parent.QueryInterface(Ci.nsIFile);
           }
-        } catch (ex) {}
+        } catch (ex) { }
         openTrustedLinkIn(fp.fileURL.spec, "current");
       }
     };
@@ -3008,14 +3013,14 @@ function BrowserOpenFileWindow() {
     );
     fp.appendFilters(
       nsIFilePicker.filterAll |
-        nsIFilePicker.filterText |
-        nsIFilePicker.filterImages |
-        nsIFilePicker.filterXML |
-        nsIFilePicker.filterHTML
+      nsIFilePicker.filterText |
+      nsIFilePicker.filterImages |
+      nsIFilePicker.filterXML |
+      nsIFilePicker.filterHTML
     );
     fp.displayDirectory = gLastOpenDirectory.path;
     fp.open(fpCallback);
-  } catch (ex) {}
+  } catch (ex) { }
 }
 
 function BrowserCloseTabOrWindow(event) {
@@ -3119,7 +3124,7 @@ function readFromClipboard() {
       data = data.value.QueryInterface(Ci.nsISupportsString);
       url = data.data;
     }
-  } catch (ex) {}
+  } catch (ex) { }
 
   return url;
 }
@@ -3150,7 +3155,7 @@ async function BrowserViewSourceOfDocument(args) {
     try {
       await top.gViewSourceUtils.openInExternalEditor(args);
       return;
-    } catch (data) {}
+    } catch (data) { }
   }
 
   let tabBrowser = gBrowser;
@@ -3163,8 +3168,8 @@ async function BrowserViewSourceOfDocument(args) {
     if (!tabBrowser) {
       throw new Error(
         "BrowserViewSourceOfDocument should be passed the " +
-          "subject browser if called from a window without " +
-          "gBrowser defined."
+        "subject browser if called from a window without " +
+        "gBrowser defined."
       );
     }
     // Some internal URLs (such as specific chrome: and about: URLs that are
@@ -3242,41 +3247,44 @@ function BrowserPageInfo(
   browsingContext,
   browser
 ) {
-  if (documentURL instanceof HTMLDocument) {
-    Deprecated.warning(
-      "Please pass the location URL instead of the document " +
-        "to BrowserPageInfo() as the first argument.",
-      "https://bugzilla.mozilla.org/show_bug.cgi?id=1238180"
-    );
-    documentURL = documentURL.location;
-  }
-
-  let args = { initialTab, imageElement, browsingContext, browser };
-
-  documentURL = documentURL || window.gBrowser.selectedBrowser.currentURI.spec;
-
-  // Check for windows matching the url
-  for (let currentWindow of Services.wm.getEnumerator("Browser:page-info")) {
-    if (currentWindow.closed) {
-      continue;
-    }
-    if (
-      currentWindow.document.documentElement.getAttribute("relatedUrl") ==
-      documentURL
-    ) {
-      currentWindow.focus();
-      currentWindow.resetPageInfo(args);
-      return currentWindow;
-    }
-  }
-
-  // We didn't find a matching window, so open a new one.
-  return openDialog(
-    "chrome://browser/content/pageinfo/pageInfo.xhtml",
-    "",
-    "chrome,toolbar,dialog=no,resizable",
-    args
-  );
+  gIdentityHandler._openPopup()
+
+  // @todo(dot-browser): We're removing the Page Info dialog popup in favour of the identity box popup
+  // if (documentURL instanceof HTMLDocument) {
+  //   Deprecated.warning(
+  //     "Please pass the location URL instead of the document " +
+  //     "to BrowserPageInfo() as the first argument.",
+  //     "https://bugzilla.mozilla.org/show_bug.cgi?id=1238180"
+  //   );
+  //   documentURL = documentURL.location;
+  // }
+
+  // let args = { initialTab, imageElement, browsingContext, browser };
+
+  // documentURL = documentURL || window.gBrowser.selectedBrowser.currentURI.spec;
+
+  // // Check for windows matching the url
+  // for (let currentWindow of Services.wm.getEnumerator("Browser:page-info")) {
+  //   if (currentWindow.closed) {
+  //     continue;
+  //   }
+  //   if (
+  //     currentWindow.document.documentElement.getAttribute("relatedUrl") ==
+  //     documentURL
+  //   ) {
+  //     currentWindow.focus();
+  //     currentWindow.resetPageInfo(args);
+  //     return currentWindow;
+  //   }
+  // }
+
+  // // We didn't find a matching window, so open a new one.
+  // return openDialog(
+  //   "chrome://browser/content/pageinfo/pageInfo.xhtml",
+  //   "",
+  //   "chrome,toolbar,dialog=no,resizable",
+  //   args
+  // );
 }
 
 function UpdateUrlbarSearchSplitterState() {
@@ -3779,7 +3787,7 @@ var homeButtonObserver = {
     browserDragAndDrop.dragOver(aEvent);
     aEvent.dropEffect = "link";
   },
-  onDragExit(aEvent) {},
+  onDragExit(aEvent) { },
 };
 
 function openHomeDialog(aURL) {
@@ -3812,7 +3820,7 @@ var newTabButtonObserver = {
   onDragOver(aEvent) {
     browserDragAndDrop.dragOver(aEvent);
   },
-  onDragExit(aEvent) {},
+  onDragExit(aEvent) { },
   async onDrop(aEvent) {
     let links = browserDragAndDrop.dropLinks(aEvent);
     if (
@@ -3851,7 +3859,7 @@ var newWindowButtonObserver = {
   onDragOver(aEvent) {
     browserDragAndDrop.dragOver(aEvent);
   },
-  onDragExit(aEvent) {},
+  onDragExit(aEvent) { },
   async onDrop(aEvent) {
     let links = browserDragAndDrop.dropLinks(aEvent);
     if (
@@ -4209,7 +4217,7 @@ const BrowserSearch = {
         win.BrowserSearch.webSearch();
       } else {
         // If there are no open browser windows, open a new one
-        var observer = function(subject, topic, data) {
+        var observer = function (subject, topic, data) {
           if (subject == win) {
             BrowserSearch.webSearch();
             Services.obs.removeObserver(
@@ -4229,7 +4237,7 @@ const BrowserSearch = {
       return;
     }
 
-    let focusUrlBarIfSearchFieldIsNotActive = function(aSearchBar) {
+    let focusUrlBarIfSearchFieldIsNotActive = function (aSearchBar) {
       if (!aSearchBar || document.activeElement != aSearchBar.textbox) {
         // Limit the results to search suggestions, like the search bar.
         gURLBar.searchModeShortcut();
@@ -4475,13 +4483,13 @@ function FillHistoryMenu(aParent) {
   // Lazily add the hover listeners on first showing and never remove them
   if (!aParent.hasStatusListener) {
     // Show history item's uri in the status bar when hovering, and clear on exit
-    aParent.addEventListener("DOMMenuItemActive", function(aEvent) {
+    aParent.addEventListener("DOMMenuItemActive", function (aEvent) {
       // Only the current page should have the checked attribute, so skip it
       if (!aEvent.target.hasAttribute("checked")) {
         XULBrowserWindow.setOverLink(aEvent.target.getAttribute("uri"));
       }
     });
-    aParent.addEventListener("DOMMenuItemInactive", function() {
+    aParent.addEventListener("DOMMenuItemInactive", function () {
       XULBrowserWindow.setOverLink("");
     });
 
@@ -5285,7 +5293,7 @@ var XULBrowserWindow = {
     // See bug 358202, when tabs are switched during a drag operation,
     // timers don't fire on windows (bug 203573)
     if (aRequest) {
-      setTimeout(function() {
+      setTimeout(function () {
         XULBrowserWindow.asyncUpdateUI();
       }, 0);
     } else {
@@ -5432,7 +5440,7 @@ var XULBrowserWindow = {
 
     try {
       uri = Services.io.createExposableURI(uri);
-    } catch (e) {}
+    } catch (e) { }
     gIdentityHandler.updateIdentity(this._state, uri);
   },
 
@@ -5539,7 +5547,7 @@ var LinkTargetDisplay = {
 
   _showDelayed() {
     this._timer = setTimeout(
-      function(self) {
+      function (self) {
         StatusPanel.update();
         window.removeEventListener("mousemove", self, true);
       },
@@ -5718,7 +5726,7 @@ var CombinedStopReload = {
     // accidentally reloading the page when intending to click the stop button
     this.reload.disabled = true;
     this._timer = setTimeout(
-      function(self) {
+      function (self) {
         self._timer = 0;
         self.reload.disabled =
           XULBrowserWindow.reloadCommand.getAttribute("disabled") == "true";
@@ -5880,7 +5888,7 @@ var TabsProgressListener = {
   },
 };
 
-function nsBrowserAccess() {}
+function nsBrowserAccess() { }
 
 nsBrowserAccess.prototype = {
   QueryInterface: ChromeUtils.generateQI(["nsIBrowserDOMWindow"]),
@@ -5996,7 +6004,7 @@ nsBrowserAccess.prototype = {
     if (aOpenWindowInfo && isExternal) {
       Cu.reportError(
         "nsBrowserAccess.openURI did not expect aOpenWindowInfo to be " +
-          "passed if the context is OPEN_EXTERNAL."
+        "passed if the context is OPEN_EXTERNAL."
       );
       throw Components.Exception("", Cr.NS_ERROR_FAILURE);
     }
@@ -6209,7 +6217,7 @@ nsBrowserAccess.prototype = {
 
     var userContextId =
       aParams.openerOriginAttributes &&
-      "userContextId" in aParams.openerOriginAttributes
+        "userContextId" in aParams.openerOriginAttributes
         ? aParams.openerOriginAttributes.userContextId
         : Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
 
@@ -6469,7 +6477,7 @@ function setToolbarVisibility(
             }
             try {
               currentURI = Services.io.newURI(uriToLoad);
-            } catch (ex) {}
+            } catch (ex) { }
           }
         }
         isVisible =
@@ -6551,7 +6559,7 @@ var gTabletModePageCounter = {
   inc() {
     this.enabled = AppConstants.isPlatformAndVersionAtLeast("win", "10.0");
     if (!this.enabled) {
-      this.inc = () => {};
+      this.inc = () => { };
       return;
     }
     this.inc = this._realInc;
@@ -7053,7 +7061,7 @@ function handleDroppedLink(
     }
   }
 
-  (async function() {
+  (async function () {
     if (
       links.length >=
       Services.prefs.getIntPref("browser.tabs.maxOpenBeforeWarn")
@@ -7455,7 +7463,7 @@ var BrowserOffline = {
       if (cancelGoOffline.data) {
         return false;
       }
-    } catch (ex) {}
+    } catch (ex) { }
 
     return true;
   },
@@ -8008,7 +8016,7 @@ function BrowserOpenAddonsMgr(aView) {
     let emWindow;
     let browserWindow;
 
-    var receivePong = function(aSubject, aTopic, aData) {
+    var receivePong = function (aSubject, aTopic, aData) {
       let browserWin = aSubject.browsingContext.topChromeWindow;
       if (!emWindow || browserWin == window /* favor the current window */) {
         emWindow = aSubject;
@@ -8815,7 +8823,7 @@ var PanicButtonNotifier = {
         PanicButtonNotifier.close();
         removeListeners();
       };
-      popup.addEventListener("popupshown", function() {
+      popup.addEventListener("popupshown", function () {
         PanicButtonNotifier.timer = setTimeout(onTimeout, 3000);
       });
       // To prevent the popup from closing when user tries to interact with the
@@ -9520,7 +9528,7 @@ var gDialogBox = {
       },
     });
     let closedPromise = new Promise(resolve => {
-      this._closedCallback = function() {
+      this._closedCallback = function () {
         PromptUtils.fireDialogEvent(window, "DOMModalDialogClosed");
         resolve();
       };
