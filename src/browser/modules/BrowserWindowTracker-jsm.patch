diff --git a/browser/modules/BrowserWindowTracker.jsm b/browser/modules/BrowserWindowTracker.jsm
index 4e0d41cb5b05b9ca2d50af8ede0b1f2d5a96ffc2..a7713f65d469a94b852845f14fc9d41aca2f9bd0 100644
--- a/browser/modules/BrowserWindowTracker.jsm
+++ b/browser/modules/BrowserWindowTracker.jsm
@@ -46,9 +46,9 @@ function _updateCurrentBrowsingContextID(browser) {
 
   debug(
     "Current window uri=" +
-      (browser.currentURI && browser.currentURI.spec) +
-      " browsing context id=" +
-      browser.browsingContext.id
+    (browser.currentURI && browser.currentURI.spec) +
+    " browsing context id=" +
+    browser.browsingContext.id
   );
 
   _lastTopBrowsingContextID = browser.browsingContext.id;
@@ -66,7 +66,7 @@ function _handleEvent(event) {
   switch (event.type) {
     case "TabBrowserInserted":
       if (
-        event.target.ownerGlobal.gBrowser.selectedBrowser ===
+        event.target.ownerGlobal.dot.tabs.selectedTab.webContents ===
         event.target.linkedBrowser
       ) {
         _updateCurrentBrowsingContextID(event.target.linkedBrowser);
@@ -109,27 +109,27 @@ function _untrackWindowOrder(window) {
 var WindowHelper = {
   addWindow(window) {
     // Add event listeners
-    TAB_EVENTS.forEach(function(event) {
-      window.gBrowser.tabContainer.addEventListener(event, _handleEvent);
+    TAB_EVENTS.forEach(function (event) {
+      window.dot.tabs.tabContainer.addEventListener(event, _handleEvent);
     });
-    WINDOW_EVENTS.forEach(function(event) {
+    WINDOW_EVENTS.forEach(function (event) {
       window.addEventListener(event, _handleEvent);
     });
 
     _trackWindowOrder(window);
 
     // Update the selected tab's content outer window ID.
-    _updateCurrentBrowsingContextID(window.gBrowser.selectedBrowser);
+    _updateCurrentBrowsingContextID(window.dot.tabs.selectedTab.webContents);
   },
 
   removeWindow(window) {
     _untrackWindowOrder(window);
 
     // Remove the event listeners
-    TAB_EVENTS.forEach(function(event) {
-      window.gBrowser.tabContainer.removeEventListener(event, _handleEvent);
+    TAB_EVENTS.forEach(function (event) {
+      window.dot.tabs.tabContainer.removeEventListener(event, _handleEvent);
     });
-    WINDOW_EVENTS.forEach(function(event) {
+    WINDOW_EVENTS.forEach(function (event) {
       window.removeEventListener(event, _handleEvent);
     });
   },
@@ -143,7 +143,7 @@ var WindowHelper = {
     _untrackWindowOrder(window);
     _trackWindowOrder(window);
 
-    _updateCurrentBrowsingContextID(window.gBrowser.selectedBrowser);
+    _updateCurrentBrowsingContextID(window.dot.tabs.selectedTab.webContents);
   },
 };
 
@@ -173,7 +173,7 @@ this.BrowserWindowTracker = {
   },
 
   windowCreated(browser) {
-    if (browser === browser.ownerGlobal.gBrowser.selectedBrowser) {
+    if (browser === browser.ownerGlobal.dot.tabs.selectedTab.webContents) {
       _updateCurrentBrowsingContextID(browser);
     }
   },
@@ -198,7 +198,7 @@ this.BrowserWindowTracker = {
   getAllVisibleTabs() {
     let tabs = [];
     for (let win of BrowserWindowTracker.orderedWindows) {
-      for (let tab of win.gBrowser.visibleTabs) {
+      for (let tab of win.dot.tabs.list) {
         // Only use tabs which are not discarded / unrestored
         if (tab.linkedPanel) {
           let { contentTitle, browserId } = tab.linkedBrowser;
