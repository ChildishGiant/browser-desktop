diff --git a/toolkit/mozapps/extensions/internal/XPIProvider.jsm b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
index 0599e221ed1eac4b894ae9aeab3b4f958c4a48bd..3dd758e835fe526fe2abf58dbd08efa6e7c15ad7 100644
--- a/toolkit/mozapps/extensions/internal/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
@@ -900,8 +900,8 @@ class TemporaryLocation extends XPIStateLocation {
     // Installs are a no-op. We only register that add-ons exist, and
     // run them from their current location.
     return {
-      installAddon() {},
-      uninstallAddon() {},
+      installAddon() { },
+      uninstallAddon() { },
     };
   }
 
@@ -934,8 +934,8 @@ var BuiltInLocation = new (class _BuiltInLocation extends XPIStateLocation {
   // that are embedded within the browser, these are no-ops.
   makeInstaller() {
     return {
-      installAddon() {},
-      uninstallAddon() {},
+      installAddon() { },
+      uninstallAddon() { },
     };
   }
 
@@ -1014,7 +1014,7 @@ class DirectoryLocation extends XPIStateLocation {
       } catch (e) {
         logger.warn(
           `Symbolic link ${aFile.path} points to a path ` +
-            `which does not exist`
+          `which does not exist`
         );
         return null;
       }
@@ -1040,7 +1040,7 @@ class DirectoryLocation extends XPIStateLocation {
       if (!linkedDirectory.exists()) {
         logger.warn(
           `File pointer ${aFile.path} points to ${linkedDirectory.path} ` +
-            "which does not exist"
+          "which does not exist"
         );
         return null;
       }
@@ -1048,7 +1048,7 @@ class DirectoryLocation extends XPIStateLocation {
       if (!linkedDirectory.isDirectory()) {
         logger.warn(
           `File pointer ${aFile.path} points to ${linkedDirectory.path} ` +
-            "which is not a directory"
+          "which is not a directory"
         );
         return null;
       }
@@ -1850,7 +1850,7 @@ class BootstrapScope {
   }
 
   // No-op method to be overridden by tests.
-  _beforeCallBootstrapMethod() {}
+  _beforeCallBootstrapMethod() { }
 
   /**
    * Loads a bootstrapped add-on's bootstrap.js into a sandbox and the reason
@@ -2472,7 +2472,7 @@ var XPIProvider = {
       AddonManagerPrivate.markProviderSafe(this);
 
       this.maybeInstallBuiltinAddon(
-        "default-theme@mozilla.org",
+        Services.builtInThemes.DEFAULT_THEME_ID,
         "1.2",
         "resource://default-theme/"
       );
@@ -2486,7 +2486,7 @@ var XPIProvider = {
             "EMCheckCompatibility",
             AddonManager.checkCompatibility
           );
-        } catch (e) {}
+        } catch (e) { }
         this.addAddonsToCrashReporter();
       }
 
@@ -2547,9 +2547,9 @@ var XPIProvider = {
           } catch (e) {
             logger.error(
               "Failed to load bootstrap addon " +
-                addon.id +
-                " from " +
-                addon.descriptor,
+              addon.id +
+              " from " +
+              addon.descriptor,
               e
             );
           }
@@ -2758,7 +2758,7 @@ var XPIProvider = {
 
     try {
       Services.appinfo.annotateCrashReport("Add-ons", data);
-    } catch (e) {}
+    } catch (e) { }
 
     TelemetrySession.setAddOns(data);
   },
@@ -3000,7 +3000,7 @@ var XPIProvider = {
       if (!XPIStates.size) {
         logger.debug(
           "Empty XPI database, setting schema version preference to " +
-            DB_SCHEMA
+          DB_SCHEMA
         );
         Services.prefs.setIntPref(PREF_DB_SCHEMA, DB_SCHEMA);
       } else {
@@ -3227,7 +3227,7 @@ for (let meth of [
   "updateSystemAddons",
   "stageLangpacksForAppUpdate",
 ]) {
-  XPIProvider[meth] = function() {
+  XPIProvider[meth] = function () {
     return XPIInstall[meth](...arguments);
   };
 }
@@ -3239,7 +3239,7 @@ for (let meth of [
   "updateAddonRepositoryData",
   "updateAddonAppDisabledStates",
 ]) {
-  XPIProvider[meth] = function() {
+  XPIProvider[meth] = function () {
     return XPIDatabase[meth](...arguments);
   };
 }
