diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
index 1a2bea9e1568e697f0653af7fc6cab6f38c5f930..257041c2e9c101ca68230f0e3f7b7fe8d914200c 100644
--- a/dom/base/Navigator.cpp
+++ b/dom/base/Navigator.cpp
@@ -74,6 +74,7 @@
 #  include "nsIMarionette.h"
 #  include "nsIRemoteAgent.h"
 #endif
+#include "nsIRandomGenerator.h"
 #include "nsStreamUtils.h"
 #include "WidgetUtils.h"
 #include "nsIScriptError.h"
@@ -451,17 +452,51 @@ void Navigator::GetOscpu(nsAString& aOSCPU, CallerType aCallerType,
   CopyASCIItoUTF16(oscpu, aOSCPU);
 }
 
-void Navigator::GetVendor(nsAString& aVendor) { aVendor.Truncate(); }
+void Navigator::GetVendor(nsAString& aVendor) {
+  aVendor.Truncate();
 
-void Navigator::GetVendorSub(nsAString& aVendorSub) { aVendorSub.Truncate(); }
+  if (MOZ_LIKELY(StaticPrefs::privacy_resistFingerprinting_randomVendor())) {
+    // Create the random generator
+    nsCOMPtr<nsIRandomGenerator> rg =
+        do_GetService("@mozilla.org/security/random-generator;1");
+
+    // Create a temporary variable for the random vendor
+    unsigned char* randomBytes;
+    // Fills it with random characters
+    rg->GenerateRandomBytes(16, &randomBytes);
+    // sends that to the vendor string
+    aVendor.AppendASCII(reinterpret_cast<const char*>(randomBytes));
+  }
+}
+
+void Navigator::GetVendorSub(nsAString& aVendorSub) {
+  aVendorSub.Truncate();
+
+  if (MOZ_LIKELY(StaticPrefs::privacy_resistFingerprinting_randomVendor())) {
+    // Create the random generator
+    nsCOMPtr<nsIRandomGenerator> rg =
+        do_GetService("@mozilla.org/security/random-generator;1");
+
+    // Create a temporary variable for the random vendor
+    unsigned char* randomBytes;
+    // Fills it with random characters
+    rg->GenerateRandomBytes(16, &randomBytes);
+    // sends that to the vendor string
+    aVendorSub.AppendASCII(reinterpret_cast<const char*>(randomBytes));
+  }
+}
 
 void Navigator::GetProduct(nsAString& aProduct) {
   aProduct.AssignLiteral("Gecko");
 }
 
 void Navigator::GetProductSub(nsAString& aProductSub) {
-  // Legacy build date hardcoded for backward compatibility (bug 776376)
-  aProductSub.AssignLiteral(LEGACY_UA_GECKO_TRAIL);
+  if (MOZ_LIKELY(StaticPrefs::privacy_resistFingerprinting_useCommonGeckoBuildDate())) {
+    aProductSub.AssignLiteral("20030107");
+  } else {
+    // Legacy build date hardcoded for backward compatibility (bug 776376)
+    aProductSub.AssignLiteral(LEGACY_UA_GECKO_TRAIL);
+  }
 }
 
 nsMimeTypeArray* Navigator::GetMimeTypes(ErrorResult& aRv) {
