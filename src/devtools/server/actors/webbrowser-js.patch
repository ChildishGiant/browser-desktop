diff --git a/devtools/server/actors/webbrowser.js b/devtools/server/actors/webbrowser.js
index abcc3fa19b1bd9b9fd9e29b7cc024ae231089dfa..a0e3065b549f30b9ded3b29b93907d62b53b0151 100644
--- a/devtools/server/actors/webbrowser.js
+++ b/devtools/server/actors/webbrowser.js
@@ -222,7 +222,7 @@ function BrowserTabList(connection) {
 
 BrowserTabList.prototype.constructor = BrowserTabList;
 
-BrowserTabList.prototype.destroy = function() {
+BrowserTabList.prototype.destroy = function () {
   this._actorByBrowser.clear();
   this.onListChanged = null;
 };
@@ -237,15 +237,15 @@ BrowserTabList.prototype.destroy = function() {
  *         browser window might not be loaded yet - the function will return
  *         |null| in such cases.
  */
-BrowserTabList.prototype._getSelectedBrowser = function(window) {
-  return window.gBrowser ? window.gBrowser.selectedBrowser : null;
+BrowserTabList.prototype._getSelectedBrowser = function (window) {
+  return window.dot.tabs.selectedTab ? window.dot.tabs.selectedTab : null;
 };
 
 /**
  * Produces an iterable (in this case a generator) to enumerate all available
  * browser tabs.
  */
-BrowserTabList.prototype._getBrowsers = function*() {
+BrowserTabList.prototype._getBrowsers = function* () {
   // Iterate over all navigator:browser XUL windows.
   for (const win of Services.wm.getEnumerator(
     DevToolsServer.chromeWindowType
@@ -258,23 +258,11 @@ BrowserTabList.prototype._getBrowsers = function*() {
   }
 };
 
-BrowserTabList.prototype._getChildren = function(window) {
-  if (!window.gBrowser) {
-    return [];
-  }
-  const { gBrowser } = window;
-  if (!gBrowser.browsers) {
-    return [];
-  }
-  return gBrowser.browsers.filter(browser => {
-    // Filter tabs that are closing. listTabs calls made right after TabClose
-    // events still list tabs in process of being closed.
-    const tab = gBrowser.getTabForBrowser(browser);
-    return !tab.closing;
-  });
+BrowserTabList.prototype._getChildren = function (window) {
+  return window.dot.tabs.list.map(x => x.webContents);
 };
 
-BrowserTabList.prototype.getList = async function() {
+BrowserTabList.prototype.getList = async function () {
   // As a sanity check, make sure all the actors presently in our map get
   // picked up when we iterate over all windows' tabs.
   const initialMapSize = this._actorByBrowser.size;
@@ -307,7 +295,7 @@ BrowserTabList.prototype.getList = async function() {
   return actors;
 };
 
-BrowserTabList.prototype._getActorForBrowser = async function(browser) {
+BrowserTabList.prototype._getActorForBrowser = async function (browser) {
   // Do we have an existing actor for this browser? If not, create one.
   let actor = this._actorByBrowser.get(browser);
   if (actor) {
@@ -321,7 +309,7 @@ BrowserTabList.prototype._getActorForBrowser = async function(browser) {
   return actor;
 };
 
-BrowserTabList.prototype.getTab = function({ outerWindowID, tabId }) {
+BrowserTabList.prototype.getTab = function ({ outerWindowID, tabId }) {
   if (typeof outerWindowID == "number") {
     // First look for in-process frames with this ID
     const window = Services.wm.getOuterWindowWithId(outerWindowID);
@@ -399,7 +387,7 @@ Object.defineProperty(BrowserTabList.prototype, "onListChanged", {
  * The set of tabs has changed somehow. Call our onListChanged handler, if
  * one is set, and if we haven't already called it since the last iteration.
  */
-BrowserTabList.prototype._notifyListChanged = function() {
+BrowserTabList.prototype._notifyListChanged = function () {
   if (!this._onListChanged) {
     return;
   }
@@ -413,7 +401,7 @@ BrowserTabList.prototype._notifyListChanged = function() {
  * Exit |actor|, belonging to |browser|, and notify the onListChanged
  * handle if needed.
  */
-BrowserTabList.prototype._handleActorClose = function(actor, browser) {
+BrowserTabList.prototype._handleActorClose = function (actor, browser) {
   if (this._testing) {
     if (this._actorByBrowser.get(browser) !== actor) {
       throw new Error(
@@ -437,7 +425,7 @@ BrowserTabList.prototype._handleActorClose = function(actor, browser) {
  * the browser, as appropriate. Other than setting up newly created XUL
  * windows, all listener / observer management should happen here.
  */
-BrowserTabList.prototype._checkListening = function() {
+BrowserTabList.prototype._checkListening = function () {
   /*
    * If we have an onListChanged handler that we haven't sent an announcement
    * to since the last iteration, we need to watch for tab creation as well as
@@ -494,7 +482,7 @@ BrowserTabList.prototype._checkListening = function() {
  * @param eventNames array of strings
  *    An array of event names.
  */
-BrowserTabList.prototype._listenForEventsIf = function(
+BrowserTabList.prototype._listenForEventsIf = function (
   shouldListen,
   guard,
   eventNames,
@@ -516,7 +504,7 @@ BrowserTabList.prototype._listenForEventsIf = function(
 /*
  * Event listener for pagetitlechanged event.
  */
-BrowserTabList.prototype._onPageTitleChangedEvent = function(event) {
+BrowserTabList.prototype._onPageTitleChangedEvent = function (event) {
   switch (event.type) {
     case "pagetitlechanged": {
       const window = event.currentTarget.ownerGlobal;
@@ -530,7 +518,7 @@ BrowserTabList.prototype._onPageTitleChangedEvent = function(event) {
  * Handle "DOMTitleChanged" event.
  */
 BrowserTabList.prototype._onDOMTitleChanged = DevToolsUtils.makeInfallible(
-  function(browser) {
+  function (browser) {
     const actor = this._actorByBrowser.get(browser);
     if (actor) {
       this._notifyListChanged();
@@ -542,7 +530,7 @@ BrowserTabList.prototype._onDOMTitleChanged = DevToolsUtils.makeInfallible(
 /**
  * Implement nsIDOMEventListener.
  */
-BrowserTabList.prototype.handleEvent = DevToolsUtils.makeInfallible(function(
+BrowserTabList.prototype.handleEvent = DevToolsUtils.makeInfallible(function (
   event
 ) {
   // If event target has `linkedBrowser`, the event target can be assumed <tab> element.
@@ -583,13 +571,13 @@ BrowserTabList.prototype.handleEvent = DevToolsUtils.makeInfallible(function(
     }
   }
 },
-"BrowserTabList.prototype.handleEvent");
+  "BrowserTabList.prototype.handleEvent");
 
 /*
  * If |shouldListen| is true, ensure we've registered a listener with the
  * window mediator. Otherwise, ensure we haven't registered a listener.
  */
-BrowserTabList.prototype._listenToMediatorIf = function(shouldListen) {
+BrowserTabList.prototype._listenToMediatorIf = function (shouldListen) {
   if (!shouldListen !== !this._listeningToMediator) {
     const op = shouldListen ? "addListener" : "removeListener";
     Services.wm[op](this);
@@ -606,7 +594,7 @@ BrowserTabList.prototype._listenToMediatorIf = function(shouldListen) {
  * An nsIWindowMediatorListener's methods get passed all sorts of windows; we
  * only care about the tab containers. Those have 'gBrowser' members.
  */
-BrowserTabList.prototype.onOpenWindow = DevToolsUtils.makeInfallible(function(
+BrowserTabList.prototype.onOpenWindow = DevToolsUtils.makeInfallible(function (
   window
 ) {
   const handleLoad = DevToolsUtils.makeInfallible(() => {
@@ -648,9 +636,9 @@ BrowserTabList.prototype.onOpenWindow = DevToolsUtils.makeInfallible(function(
 
   window.addEventListener("load", handleLoad);
 },
-"BrowserTabList.prototype.onOpenWindow");
+  "BrowserTabList.prototype.onOpenWindow");
 
-BrowserTabList.prototype.onCloseWindow = DevToolsUtils.makeInfallible(function(
+BrowserTabList.prototype.onCloseWindow = DevToolsUtils.makeInfallible(function (
   window
 ) {
   if (window instanceof Ci.nsIAppWindow) {
@@ -681,7 +669,7 @@ BrowserTabList.prototype.onCloseWindow = DevToolsUtils.makeInfallible(function(
     }, "BrowserTabList.prototype.onCloseWindow's delayed body")
   );
 },
-"BrowserTabList.prototype.onCloseWindow");
+  "BrowserTabList.prototype.onCloseWindow");
 
 exports.BrowserTabList = BrowserTabList;
 
@@ -691,7 +679,7 @@ function BrowserAddonList(connection) {
   this._onListChanged = null;
 }
 
-BrowserAddonList.prototype.getList = async function() {
+BrowserAddonList.prototype.getList = async function () {
   const addons = await AddonManager.getAllAddons();
   for (const addon of addons) {
     let actor = this._actorByAddonId.get(addon.id);
@@ -724,58 +712,58 @@ Object.defineProperty(BrowserAddonList.prototype, "onListChanged", {
 /**
  * AddonManager listener must implement onDisabled.
  */
-BrowserAddonList.prototype.onDisabled = function(addon) {
+BrowserAddonList.prototype.onDisabled = function (addon) {
   this._onAddonManagerUpdated();
 };
 
 /**
  * AddonManager listener must implement onEnabled.
  */
-BrowserAddonList.prototype.onEnabled = function(addon) {
+BrowserAddonList.prototype.onEnabled = function (addon) {
   this._onAddonManagerUpdated();
 };
 
 /**
  * AddonManager listener must implement onInstalled.
  */
-BrowserAddonList.prototype.onInstalled = function(addon) {
+BrowserAddonList.prototype.onInstalled = function (addon) {
   this._onAddonManagerUpdated();
 };
 
 /**
  * AddonManager listener must implement onOperationCancelled.
  */
-BrowserAddonList.prototype.onOperationCancelled = function(addon) {
+BrowserAddonList.prototype.onOperationCancelled = function (addon) {
   this._onAddonManagerUpdated();
 };
 
 /**
  * AddonManager listener must implement onUninstalling.
  */
-BrowserAddonList.prototype.onUninstalling = function(addon) {
+BrowserAddonList.prototype.onUninstalling = function (addon) {
   this._onAddonManagerUpdated();
 };
 
 /**
  * AddonManager listener must implement onUninstalled.
  */
-BrowserAddonList.prototype.onUninstalled = function(addon) {
+BrowserAddonList.prototype.onUninstalled = function (addon) {
   this._actorByAddonId.delete(addon.id);
   this._onAddonManagerUpdated();
 };
 
-BrowserAddonList.prototype._onAddonManagerUpdated = function(addon) {
+BrowserAddonList.prototype._onAddonManagerUpdated = function (addon) {
   this._notifyListChanged();
   this._adjustListener();
 };
 
-BrowserAddonList.prototype._notifyListChanged = function() {
+BrowserAddonList.prototype._notifyListChanged = function () {
   if (this._onListChanged) {
     this._onListChanged();
   }
 };
 
-BrowserAddonList.prototype._adjustListener = function() {
+BrowserAddonList.prototype._adjustListener = function () {
   if (this._onListChanged) {
     // As long as the callback exists, we need to listen for changes
     // so we can notify about add-on changes.
